name: philips-labs/unleash
resources:
    unleash_api_token:
        subCategory: ""
        description: Provides a resource for managing unleash api tokens.
        name: unleash_api_token
        title: unleash_api_token Resource - terraform-provider-unleash
        examples:
            - name: my_token
              manifest: |-
                {
                  "environment": "*",
                  "expires_at": "2024-10-19",
                  "projects": [
                    "*"
                  ],
                  "type": "admin",
                  "username": "bobjoe"
                }
        argumentDocs:
            created_at: (String) The API token creation date.
            environment: (String) The environment the token will have access to. Use "*" for all environments. By default, it will have access to all environments.
            expires_at: (String) The API token expiration date.
            id: (String) The ID of this resource.
            projects: (Set of String) The project(s) the token will have access to. Use ["*"] for all projects. By default, it will have access to all projects.
            secret: (String, Sensitive) The API token secret.
            type: (String) The type of the API token. Can be client, admin or frontend
            username: (String)
        importStatements: []
    unleash_feature:
        subCategory: ""
        description: Provides a resource for managing unleash features.
        name: unleash_feature
        title: unleash_feature Resource - terraform-provider-unleash
        examples:
            - name: example
              manifest: |-
                {
                  "name": "toggle",
                  "project_id": "${data.unleash_project.example.project_id}",
                  "type": "${data.unleash_feature_type.example.type_id}"
                }
              references:
                project_id: data.unleash_project.example.project_id
                type: data.unleash_feature_type.example.type_id
            - name: variants_example
              manifest: |-
                {
                  "name": "toggle_variants",
                  "project_id": "${data.unleash_project.example.project_id}",
                  "type": "${data.unleash_feature_type.example.type_id}",
                  "variant": [
                    {
                      "name": "Variant1"
                    },
                    {
                      "name": "Variant2",
                      "overrides": [
                        {
                          "context_name": "appName",
                          "values": [
                            "bar",
                            "xyz"
                          ]
                        },
                        {
                          "context_name": "environment",
                          "values": [
                            "development"
                          ]
                        }
                      ],
                      "payload": [
                        {
                          "type": "string",
                          "value": "foo"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: data.unleash_project.example.project_id
                type: data.unleash_feature_type.example.type_id
        argumentDocs:
            archive_on_destroy: (Boolean) Whether to archive the feature toggle on destroy. Default is true. When false, it will permanently delete the feature toggle.
            context_name: (String)
            description: (String) Feature description
            id: (String) The ID of this resource.
            name: (String) Feature name
            overrides: (Block Set) Overrides existing context field values. Values are comma separated e.g v1, v2, ...) (see below for nested schema)
            payload: '(Block Set, Max: 1) Variant payload. The type of the payload can be string, json or csv (see below for nested schema)'
            project_id: (String) The feature will be created in the given project
            stickiness: (String) Variant stickiness. Default is default.
            type: (String) Feature type
            value: (String)
            values: (List of String)
            variant: (Block List) Feature variant (see below for nested schema)
            weight: (Number) Variant weight. Only considered when the weight_type is fix. It is calculated automatically if the weight_type is variable.
            weight_type: (String) Variant weight type. The weight type can be fix or variable. Default is variable.
        importStatements: []
    unleash_feature_enabling:
        subCategory: ""
        description: Provides a resource for enabling a feature toggle in the given environment. This can be only done after the feature toggle has at least one strategy.
        name: unleash_feature_enabling
        title: unleash_feature_enabling Resource - terraform-provider-unleash
        examples:
            - name: example
              manifest: |-
                {
                  "depends_on": [
                    "${unleash_strategy_assignment.example}"
                  ],
                  "enabled": true,
                  "environment": "development",
                  "feature_name": "${unleash_feature.example.name}",
                  "project_id": "${data.unleash_project.example.project_id}"
                }
              references:
                feature_name: unleash_feature.example.name
                project_id: data.unleash_project.example.project_id
              dependencies:
                unleash_feature.example: |-
                    {
                      "name": "toggle",
                      "project_id": "${data.unleash_project.example.project_id}",
                      "type": "${data.unleash_feature_type.example.type_id}"
                    }
                unleash_strategy_assignment.example: |-
                    {
                      "environment": "development",
                      "feature_name": "${unleash_feature.example.name}",
                      "parameters": {
                        "groupId": "toggle",
                        "rollout": "68",
                        "stickiness": "random"
                      },
                      "project_id": "${data.unleash_project.example.project_id}",
                      "strategy_name": "flexibleRollout"
                    }
        argumentDocs:
            enabled: (Boolean) Whether the feature is on/off in the provided environment. Default is true (on).
            environment: (String) The environment where the toggle will be enabled
            feature_name: (String) Feature name to enabled
            id: (String) The ID of this resource.
            project_id: (String) The unleash project the feature is in
        importStatements: []
    unleash_feature_v2:
        subCategory: ""
        description: (Experimental) Provides a resource for managing unleash features with variants and environment strategies all in a single resource.
        name: unleash_feature_v2
        title: unleash_feature_v2 Resource - terraform-provider-unleash
        examples:
            - name: with_env_strategies
              manifest: |-
                {
                  "archive_on_destroy": false,
                  "description": "manages my nice feature",
                  "environment": [
                    {
                      "enabled": false,
                      "name": "production"
                    },
                    {
                      "enabled": true,
                      "name": "development",
                      "strategy": [
                        {
                          "constraint": [
                            {
                              "case_insensitive": false,
                              "context_name": "appName",
                              "inverted": false,
                              "operator": "SEMVER_EQ",
                              "value": "1.0.0"
                            },
                            {
                              "context_name": "appName",
                              "operator": "IN",
                              "values": [
                                "foo",
                                "bar"
                              ]
                            }
                          ],
                          "name": "remoteAddress",
                          "parameters": {
                            "IPs": "189.434.777.123,host.test.com"
                          }
                        },
                        {
                          "name": "flexibleRollout",
                          "parameters": {
                            "groupId": "toggle",
                            "rollout": "68",
                            "stickiness": "random"
                          }
                        }
                      ]
                    }
                  ],
                  "name": "my_nice_feature",
                  "project_id": "default",
                  "tag": [
                    {
                      "type": "simple",
                      "value": "foo"
                    },
                    {
                      "type": "simple",
                      "value": "bar"
                    }
                  ],
                  "type": "release"
                }
        argumentDocs:
            archive_on_destroy: (Boolean) Whether to archive the feature toggle on destroy. Default is true. When false, it will permanently delete the feature toggle.
            case_insensitive: (Boolean) If operator is case-insensitive.
            constraint: (Block List) Strategy constraint (see below for nested schema)
            context_name: (String) Constraint context. Can be appName, currentTime, environment, sessionId or userId
            description: (String) Feature description
            enabled: (Boolean) Whether the feature is on/off in the environment. Default is true (on)
            environment: (Block List) Use this to enable a feature in an environment and add strategies (see below for nested schema)
            id: (String) The ID of this resource.
            inverted: (Boolean) If constraint expressions will be negated, meaning that they get their opposite value.
            name: (String) Feature name
            operator: (String) Constraint operator. Can be IN, NOT_IN, STR_CONTAINS, STR_STARTS_WITH, STR_ENDS_WITH, NUM_EQ, NUM_GT, NUM_GTE, NUM_LT, NUM_LTE, SEMVER_EQ, SEMVER_GT or SEMVER_LT
            overrides: (Block Set) Overrides existing context field values. Values are comma separated e.g v1, v2, ...) (see below for nested schema)
            parameters: (Map of String) Strategy parameters. All the values need to informed as strings.
            payload: '(Block Set, Max: 1) Variant payload. The type of the payload can be string, json or csv (see below for nested schema)'
            project_id: (String) The feature will be created in the given project
            stickiness: (String) Variant stickiness. Default is default.
            strategy: (Block List) Strategy to add in the environment (see below for nested schema)
            tag: (Block List) Tag to add to the feature (see below for nested schema)
            type: (String) Feature type
            value: (String) Value to use in the evaluation of the constraint. Applies only to DATE_, NUM_ and SEMVER_ operators.
            values: (List of String) List of values to use in the evaluation of the constraint. Applies to all operators, except DATE_, NUM_ and SEMVER_.
            variant: (Block List) Feature variant (see below for nested schema)
            weight: (Number) Variant weight. Only considered when the weight_type is fix. It is calculated automatically if the weight_type is variable.
            weight_type: (String) Variant weight type. The weight type can be fix or variable. Default is variable.
        importStatements: []
    unleash_strategy_assignment:
        subCategory: ""
        description: Provides a resource for add strategy to a feature toggle in the given environment.
        name: unleash_strategy_assignment
        title: unleash_strategy_assignment Resource - terraform-provider-unleash
        examples:
            - name: example
              manifest: |-
                {
                  "environment": "development",
                  "feature_name": "${unleash_feature.example.name}",
                  "parameters": {
                    "groupId": "toggle",
                    "rollout": "68",
                    "stickiness": "random"
                  },
                  "project_id": "${data.unleash_project.example.project_id}",
                  "strategy_name": "flexibleRollout"
                }
              references:
                feature_name: unleash_feature.example.name
                project_id: data.unleash_project.example.project_id
              dependencies:
                unleash_feature.example: |-
                    {
                      "name": "toggle",
                      "project_id": "${data.unleash_project.example.project_id}",
                      "type": "${data.unleash_feature_type.example.type_id}"
                    }
        argumentDocs:
            environment: (String) The environment where the strategy will take place
            feature_name: (String) Feature name to assign the strategy to
            id: (String) The ID of this resource.
            parameters: (Map of String) Strategy parameters. All the values need to informed as strings.
            project_id: (String) The unleash project the feature is in
            strategy_id: (String) Strategy id
            strategy_name: (String) Strategy unique name
        importStatements: []
    unleash_user:
        subCategory: ""
        description: Provides a resource for managing unleash users.
        name: unleash_user
        title: unleash_user Resource - terraform-provider-unleash
        examples:
            - name: my_user
              manifest: |-
                {
                  "email": "bob.joe@gmail.com",
                  "name": "Bob Joe",
                  "root_role": "Editor",
                  "send_email": false,
                  "username": "bobjoe"
                }
        argumentDocs:
            email: (String) The user's email address.
            email_sent: (Boolean) Whether the welcome email was successfully sent to the user.
            id: (String) The ID of this resource.
            invite_link: (String) The link for the login link.
            name: (String) The user's name.
            root_role: (String) The role to assign to the user. Can be Admin, Editor or Viewer
            send_email: (Boolean) Whether to send a welcome email with a login link to the user or not. Defaults to true.
            username: (String) The user's username.
        importStatements: []
